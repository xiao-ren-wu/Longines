<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">


    <!-- 配置service
    <bean>配置需要创建的对象    class需要创建实例的类全限定名
    -->
    <!--<bean id="UserService" class="com.longines.service.impl.UserServiceImp"></bean>-->
    <!-- 配置service
		<bean> 配置需要创建的对象
			id ：用于之后从spring容器获得实例时使用的
			class ：需要创建实例的全限定类名
	-->
    <!--Ioctest -->
    <bean id="ShCServiceId" class="com.longines.service.impl.Shopping_CartServiceImp"></bean>
    <!--DItest -->
    <!--<bean id="ShcDaoId" class="com.longines.dao.Shopping_CartDaoImp"></bean>
    <bean id="ShcSerId" class="com.longines.service.impl.Shopping_CartServiceImp">
        <property name="scDao" ref="ShcDaoId"></property>
    </bean>-->


    <!--加载java配置文件-->
    <context:property-placeholder location="dbinfo.properties"></context:property-placeholder>
        <!--创建数据源-->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
            <!-- 配置初始化大小、最小、最大 -->
            <property name="initialSize" value="${jdbc.initialSize}" />
            <property name="minIdle" value="${jdbc.minIdle}" />
            <property name="maxActive" value="${jdbc.maxActive}" />

            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="${jdbc.maxWait}" />

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

            <property name="validationQuery" value="${jdbc.validationQuery}" />
            <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
            <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
            <property name="testOnReturn" value="${jdbc.testOnReturn}" />

            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
            <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />

            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <property name="filters" value="${jdbc.filters}" />
        </bean>
            <!--Sqlsessionfactory-->
          <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <!--指定mybatis全局配置文件的路径-->
              <property name="configLocation" value="mybatis/mybatis-config.xml"></property>
              <!---数据源-->
              <property name="dataSource" ref="dataSource"></property>
          </bean>

          <!--**Shopping_CartDao-->
          <bean id="Shopping_CartDao" class="com.longines.dao.Shopping_CartDaoImp">
              <!--依赖注入SqlSessionFactory-->
              <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>

          </bean>


<!--    &lt;!&ndash; 扫描service包下的所有的使用注解的类型 &ndash;&gt;
    <context:component-scan base-package="com.longines.service"/>

    &lt;!&ndash; 配置事务管理器 &ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        &lt;!&ndash; 注入数据库连接池 &ndash;&gt;
        <property name="dataSource" ref="dataSource"/>
    </bean>


    &lt;!&ndash; 配置基于注解的声明式事务管理 &ndash;&gt;
    &lt;!&ndash; 默认使用注解来管理事务行为 &ndash;&gt;
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <jdbc:embedded-database id="dataSource"/>-->
</beans>